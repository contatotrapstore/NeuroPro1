/**
 * API para executar seed completo do banco de dados
 * Endpoint: /api/seed-database
 * IMPORTANTE: Este endpoint deve ser usado apenas para setup inicial
 */
module.exports = async function handler(req, res) {
  console.log('üå± Database Seed API v1.0');
  console.log('Environment:', process.env.VERCEL_ENV || process.env.NODE_ENV || 'unknown');

  // ============================================
  // CORS HEADERS (INLINE)
  // ============================================
  const allowedOrigins = [
    'https://www.neuroialab.com.br',
    'https://neuroialab.com.br',
    'https://neuroai-lab.vercel.app',
    'http://localhost:5173',
    'http://localhost:3000',
    'http://127.0.0.1:5173',
    'http://127.0.0.1:3000'
  ];

  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
  } else {
    res.setHeader('Access-Control-Allow-Origin', '*');
  }

  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  res.setHeader('Access-Control-Max-Age', '86400');

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // S√≥ permitir POST com par√¢metro de confirma√ß√£o
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: 'M√©todo n√£o permitido - use POST com ?execute=true'
    });
  }

  const executeParam = req.query.execute;
  if (executeParam !== 'true') {
    return res.status(400).json({
      success: false,
      error: 'Para executar o seed, use ?execute=true'
    });
  }

  try {
    // ============================================
    // SUPABASE INITIALIZATION
    // ============================================
    const { createClient } = require('@supabase/supabase-js');

    const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY ||
                              process.env.SUPABASE_SERVICE_KEY ||
                              process.env.VITE_SUPABASE_SERVICE_KEY;

    // Use anon key as fallback with warning
    const supabaseAnonKey = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;
    const supabaseKey = supabaseServiceKey || supabaseAnonKey;

    if (!supabaseUrl || !supabaseKey) {
      return res.status(500).json({
        success: false,
        error: 'Configura√ß√£o do servidor incompleta - necess√°rio SUPABASE_URL e uma chave v√°lida'
      });
    }

    if (!supabaseServiceKey) {
      console.warn('‚ö†Ô∏è Using anon key for seed operations - some operations may fail');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log('üå± Starting comprehensive database seed...');

    const seedResults = {
      assistants: { success: [], failed: [] },
      institutions: { success: [], failed: [] },
      institution_assistants: { success: [], failed: [] }
    };

    // ============================================
    // 1. SEED ASSISTANTS
    // ============================================
    console.log('ü§ñ Seeding assistants...');

    const assistants = [
      {
        id: 'asst_ZuPRuYG9eqxmb6tIIcBNSSWd',
        name: 'ClinReplay',
        description: 'Simulador interativo para pr√°tica de sess√µes psicanal√≠ticas. Atue como analisando em diferentes cen√°rios cl√≠nicos e desenvolva suas habilidades terap√™uticas.',
        icon: 'üé≠',
        color_theme: '#8b5cf6',
        area: 'Psicologia',
        system_prompt: 'Voc√™ √© um simulador de psican√°lise especializado para forma√ß√£o de psicanalistas. Atue como analisando (paciente) em sess√µes de treinamento para psicanalistas em forma√ß√£o.',
        welcome_message: 'Ol√°! Sou o ClinReplay, seu simulador de sess√µes psicanal√≠ticas. Posso interpretar diferentes perfis de pacientes para voc√™ praticar suas habilidades cl√≠nicas. Como podemos come√ßar?',
        openai_assistant_id: 'asst_ZuPRuYG9eqxmb6tIIcBNSSWd',
        is_active: true
      },
      {
        id: 'asst_Ohn9w46OmgwLJhxw08jSbM2f',
        name: 'NeuroCase',
        description: 'Assistente especializado em an√°lise e supervis√£o de casos cl√≠nicos, oferecendo insights e orienta√ß√µes baseados em evid√™ncias.',
        icon: 'üîç',
        color_theme: '#059669',
        area: 'Psicologia',
        system_prompt: 'Voc√™ √© um supervisor cl√≠nico especializado em an√°lise de casos. Auxilie profissionais na compreens√£o e manejo de situa√ß√µes cl√≠nicas complexas.',
        welcome_message: 'Sou o NeuroCase! Estou aqui para ajudar voc√™ na an√°lise e supervis√£o de casos cl√≠nicos. Compartilhe seu caso e vamos explorar juntos as melhores abordagens.',
        openai_assistant_id: 'asst_Ohn9w46OmgwLJhxw08jSbM2f',
        is_active: true
      },
      {
        id: 'asst_hH374jNSOTSqrsbC9Aq5MKo3',
        name: 'Guia √âtico',
        description: 'Consultor especializado em quest√µes √©ticas na pr√°tica psicol√≥gica e psicanal√≠tica, baseado nos c√≥digos de √©tica profissional.',
        icon: '‚öñÔ∏è',
        color_theme: '#dc2626',
        area: 'Psicologia',
        system_prompt: 'Voc√™ √© um consultor √©tico especializado em psicologia e psican√°lise. Oriente profissionais sobre dilemas √©ticos e condutas profissionais adequadas.',
        welcome_message: 'Ol√°! Sou o Guia √âtico. Estou aqui para ajud√°-lo a navegar quest√µes √©ticas complexas na pr√°tica cl√≠nica. Qual situa√ß√£o voc√™ gostaria de discutir?',
        openai_assistant_id: 'asst_hH374jNSOTSqrsbC9Aq5MKo3',
        is_active: true
      },
      {
        id: 'asst_9RGTNpAvpwBtNps5krM051km',
        name: 'TheraTrack',
        description: 'Assistente para acompanhamento e documenta√ß√£o do progresso terap√™utico, auxiliando no registro e an√°lise da evolu√ß√£o do processo anal√≠tico.',
        icon: 'üìä',
        color_theme: '#2563eb',
        area: 'Psicologia',
        system_prompt: 'Voc√™ √© um assistente especializado em acompanhamento terap√™utico. Ajude profissionais a documentar, analisar e acompanhar a evolu√ß√£o de seus casos cl√≠nicos.',
        welcome_message: 'Sou o TheraTrack! Vou ajud√°-lo a acompanhar e documentar o progresso de seus casos cl√≠nicos. Como posso auxiliar no registro de sua pr√°tica?',
        openai_assistant_id: 'asst_9RGTNpAvpwBtNps5krM051km',
        is_active: true
      },
      {
        id: 'asst_PsicoEdu12345678901234567890',
        name: 'PsicoEdu',
        description: 'Especialista em psicoeduca√ß√£o, oferecendo informa√ß√µes acess√≠veis sobre sa√∫de mental, desenvolvimento emocional e bem-estar psicol√≥gico.',
        icon: 'üìö',
        color_theme: '#7c3aed',
        area: 'Psicoeduca√ß√£o',
        system_prompt: 'Voc√™ √© um especialista em psicoeduca√ß√£o. Forne√ßa informa√ß√µes claras, acess√≠veis e cientificamente embasadas sobre temas de sa√∫de mental e desenvolvimento humano.',
        welcome_message: 'Ol√°! Sou o PsicoEdu, seu assistente de psicoeduca√ß√£o. Estou aqui para compartilhar conhecimentos sobre sa√∫de mental de forma clara e acess√≠vel. O que voc√™ gostaria de aprender?',
        openai_assistant_id: 'asst_PsicoEdu12345678901234567890',
        is_active: true
      }
    ];

    for (const assistant of assistants) {
      try {
        console.log(`ü§ñ Seeding assistant: ${assistant.name}`);

        const { data, error } = await supabase
          .from('assistants')
          .upsert(assistant, {
            onConflict: 'id',
            ignoreDuplicates: false
          })
          .select();

        if (error) {
          console.error(`‚ùå Error seeding ${assistant.name}:`, error);
          seedResults.assistants.failed.push({ name: assistant.name, error: error.message });
        } else {
          console.log(`‚úÖ Successfully seeded ${assistant.name}`);
          seedResults.assistants.success.push(assistant.name);
        }
      } catch (err) {
        console.error(`üí• Exception seeding ${assistant.name}:`, err);
        seedResults.assistants.failed.push({ name: assistant.name, error: err.message });
      }
    }

    // ============================================
    // 2. SEED ABPSI INSTITUTION
    // ============================================
    console.log('üèõÔ∏è Seeding ABPSI institution...');

    const abpsiInstitution = {
      slug: 'abpsi',
      name: 'Academia Brasileira de Psican√°lise',
      logo_url: '/assets/institutions/abpsi/logo.png',
      primary_color: '#c39c49',
      secondary_color: '#8b6914',
      is_active: true,
      // Only include settings if it's a JSON field in the database
      // settings: JSON.stringify({
      //   welcome_message: "Bem-vindo √† Academia Brasileira de Psican√°lise",
      //   subtitle: "Forma√ß√£o, Supervis√£o e Pr√°tica Psicanal√≠tica"
      // })
    };

    try {
      const { data: institutionData, error: institutionError } = await supabase
        .from('institutions')
        .upsert(abpsiInstitution, {
          onConflict: 'slug',
          ignoreDuplicates: false
        })
        .select();

      if (institutionError) {
        console.error('‚ùå Error seeding ABPSI institution:', institutionError);
        seedResults.institutions.failed.push({ name: 'ABPSI', error: institutionError.message });
      } else {
        console.log('‚úÖ Successfully seeded ABPSI institution');
        seedResults.institutions.success.push('ABPSI');

        // ============================================
        // 3. SEED INSTITUTION ASSISTANTS FOR ABPSI
        // ============================================
        if (institutionData && institutionData[0]) {
          console.log('üîó Seeding ABPSI institution assistants...');

          const institutionId = institutionData[0].id;
          const institutionAssistants = [
            {
              institution_id: institutionId,
              assistant_id: 'asst_ZuPRuYG9eqxmb6tIIcBNSSWd',
              custom_name: 'Simulador de Psican√°lise',
              custom_description: 'Simulador interativo para pr√°tica de sess√µes psicanal√≠ticas. Atue como analisando em diferentes cen√°rios cl√≠nicos.',
              is_enabled: true,
              is_default: true,
              display_order: 1
            },
            {
              institution_id: institutionId,
              assistant_id: 'asst_Ohn9w46OmgwLJhxw08jSbM2f',
              custom_name: 'Supervisor de Casos Cl√≠nicos',
              custom_description: 'Auxiliar na revis√£o e an√°lise de casos cl√≠nicos sob perspectiva psicanal√≠tica.',
              is_enabled: true,
              is_default: false,
              display_order: 2
            },
            {
              institution_id: institutionId,
              assistant_id: 'asst_hH374jNSOTSqrsbC9Aq5MKo3',
              custom_name: 'Consultor √âtico Psicanal√≠tico',
              custom_description: 'Orienta√ß√£o sobre quest√µes √©ticas na pr√°tica psicanal√≠tica.',
              is_enabled: true,
              is_default: false,
              display_order: 3
            },
            {
              institution_id: institutionId,
              assistant_id: 'asst_9RGTNpAvpwBtNps5krM051km',
              custom_name: 'Acompanhamento de An√°lise',
              custom_description: 'Auxiliar no acompanhamento da evolu√ß√£o do processo anal√≠tico.',
              is_enabled: true,
              is_default: false,
              display_order: 4
            }
          ];

          for (const instAssistant of institutionAssistants) {
            try {
              console.log(`üîó Linking assistant: ${instAssistant.custom_name}`);

              const { error: linkError } = await supabase
                .from('institution_assistants')
                .upsert(instAssistant, {
                  onConflict: 'institution_id,assistant_id',
                  ignoreDuplicates: false
                });

              if (linkError) {
                console.error(`‚ùå Error linking ${instAssistant.custom_name}:`, linkError);
                seedResults.institution_assistants.failed.push({
                  name: instAssistant.custom_name,
                  error: linkError.message
                });
              } else {
                console.log(`‚úÖ Successfully linked ${instAssistant.custom_name}`);
                seedResults.institution_assistants.success.push(instAssistant.custom_name);
              }
            } catch (err) {
              console.error(`üí• Exception linking ${instAssistant.custom_name}:`, err);
              seedResults.institution_assistants.failed.push({
                name: instAssistant.custom_name,
                error: err.message
              });
            }
          }
        }
      }
    } catch (err) {
      console.error('üí• Exception seeding ABPSI institution:', err);
      seedResults.institutions.failed.push({ name: 'ABPSI', error: err.message });
    }

    // ============================================
    // 4. FINAL VERIFICATION
    // ============================================
    console.log('üîç Performing final verification...');

    const { count: assistantsCount } = await supabase
      .from('assistants')
      .select('id', { count: 'exact' })
      .eq('is_active', true);

    const { count: institutionsCount } = await supabase
      .from('institutions')
      .select('id', { count: 'exact' })
      .eq('is_active', true);

    const { count: institutionAssistantsCount } = await supabase
      .from('institution_assistants')
      .select('id', { count: 'exact' })
      .eq('is_enabled', true);

    console.log('üìä Final counts:', {
      assistants: assistantsCount,
      institutions: institutionsCount,
      institution_assistants: institutionAssistantsCount
    });

    return res.status(200).json({
      success: true,
      message: 'Database seed executado com sucesso!',
      data: {
        seed_results: seedResults,
        final_counts: {
          active_assistants: assistantsCount || 0,
          active_institutions: institutionsCount || 0,
          enabled_institution_assistants: institutionAssistantsCount || 0
        },
        summary: {
          assistants_seeded: seedResults.assistants.success.length,
          assistants_failed: seedResults.assistants.failed.length,
          institutions_seeded: seedResults.institutions.success.length,
          institutions_failed: seedResults.institutions.failed.length,
          links_created: seedResults.institution_assistants.success.length,
          links_failed: seedResults.institution_assistants.failed.length
        }
      }
    });

  } catch (error) {
    console.error('üí• Database seed error:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro ao executar seed do banco de dados',
      details: error.message
    });
  }
};